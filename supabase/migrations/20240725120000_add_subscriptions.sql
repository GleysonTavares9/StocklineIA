-- Create a table to store user subscriptions
CREATE TABLE public.user_subscriptions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    plan_name TEXT NOT NULL DEFAULT 'BÃ¡sico',
    status TEXT NOT NULL DEFAULT 'active', -- e.g., active, inactive, past_due, canceled
    generations_used INT NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add a unique constraint to ensure a user can only have one active subscription at a time
ALTER TABLE public.user_subscriptions
ADD CONSTRAINT user_subscriptions_user_id_key UNIQUE (user_id);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at timestamp on row update
CREATE TRIGGER on_user_subscriptions_update
BEFORE UPDATE ON public.user_subscriptions
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- Secure the table with Row-Level Security (RLS)
ALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows users to see their own subscription
CREATE POLICY "Allow users to see their own subscription"
ON public.user_subscriptions
FOR SELECT
USING (auth.uid() = user_id);

-- Create a policy that allows users to update their own subscription (e.g., for tracking usage)
CREATE POLICY "Allow users to update their own subscription"
ON public.user_subscriptions
FOR UPDATE
USING (auth.uid() = user_id);
